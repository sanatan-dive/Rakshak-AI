'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { 
  FileText, 
  Download, 
  Calendar as CalendarIcon,
  BarChart3,
  PieChart,
  TrendingUp,
  AlertTriangle,
  Camera,
  MapPin
} from 'lucide-react';
import { format } from 'date-fns';
import jsPDF from 'jspdf';

const mockReports = [
  {
    id: 1,
    title: 'Daily Incident Summary - Jan 27, 2025',
    type: 'daily',
    date: '2025-01-27',
    incidents: 24,
    cameras: 1502,
    alerts: 8,
    status: 'generated'
  },
  {
    id: 2,
    title: 'Weekly Security Analysis - Week 4',
    type: 'weekly',
    date: '2025-01-21',
    incidents: 156,
    cameras: 1502,
    alerts: 45,
    status: 'generated'
  },
  {
    id: 3,
    title: 'Monthly Overview - January 2025',
    type: 'monthly',
    date: '2025-01-01',
    incidents: 623,
    cameras: 1502,
    alerts: 187,
    status: 'generating'
  }
];

const mockStats = {
  totalIncidents: 1247,
  highPriorityAlerts: 89,
  resolvedCases: 1158,
  averageResponseTime: '4.2 min',
  topLocations: [
    { name: 'Sector 17 Plaza', count: 45 },
    { name: 'Rose Garden', count: 32 },
    { name: 'Sukhna Lake', count: 28 },
    { name: 'IT Park', count: 24 }
  ],
  incidentTypes: [
    { type: 'suspicious', count: 487, percentage: 39 },
    { type: 'traffic', count: 312, percentage: 25 },
    { type: 'crowd', count: 248, percentage: 20 },
    { type: 'weapon', count: 124, percentage: 10 },
    { type: 'emotion', count: 76, percentage: 6 }
  ]
};

export default function ReportsPage() {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [reportType, setReportType] = useState('daily');
  const [selectedLocation, setSelectedLocation] = useState('all');

  const generatePDFReport = (reportData: any) => {
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(20);
    doc.text('Rakshak AI - Security Report', 20, 30);
    
    // Report details
    doc.setFontSize(12);
    doc.text(`Report Type: ${reportData.type.toUpperCase()}`, 20, 50);
    doc.text(`Generated: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}`, 20, 60);
    doc.text(`Date Range: ${reportData.date}`, 20, 70);
    
    // Statistics
    doc.setFontSize(14);
    doc.text('Summary Statistics', 20, 90);
    doc.setFontSize(10);
    doc.text(`Total Incidents: ${reportData.incidents}`, 20, 105);
    doc.text(`Active Cameras: ${reportData.cameras}`, 20, 115);
    doc.text(`High Priority Alerts: ${reportData.alerts}`, 20, 125);
    
    // Top locations
    doc.setFontSize(14);
    doc.text('Top Incident Locations', 20, 150);
    doc.setFontSize(10);
    mockStats.topLocations.forEach((location, index) => {
      doc.text(`${index + 1}. ${location.name}: ${location.count} incidents`, 20, 165 + (index * 10));
    });
    
    // Footer
    doc.setFontSize(8);
    doc.text('Generated by Rakshak AI - Chandigarh Police Surveillance System', 20, 280);
    doc.text('Developed by Team Cypher for Cytherthon.ai 2025', 20, 290);
    
    doc.save(`${reportData.title.replace(/\s+/g, '_')}.pdf`);
  };

  const generateCustomReport = () => {
    const customReport = {
      title: `Custom Report - ${format(selectedDate || new Date(), 'MMM dd, yyyy')}`,
      type: reportType,
      date: format(selectedDate || new Date(), 'yyyy-MM-dd'),
      incidents: Math.floor(Math.random() * 100) + 20,
      cameras: 1502,
      alerts: Math.floor(Math.random() * 20) + 5,
      location: selectedLocation
    };

    generatePDFReport(customReport);
  };

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-white">Security Reports</h1>
        <p className="text-gray-400 mt-1">
          Generate and download comprehensive security reports and analytics
        </p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">
              Total Incidents
            </CardTitle>
            <BarChart3 className="h-4 w-4 text-blue-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {mockStats.totalIncidents.toLocaleString()}
            </div>
            <p className="text-xs text-gray-500 mt-1">
              +12% from last month
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">
              High Priority Alerts
            </CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-500">
              {mockStats.highPriorityAlerts}
            </div>
            <p className="text-xs text-gray-500 mt-1">
              -8% from last month
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">
              Resolved Cases
            </CardTitle>
            <TrendingUp className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-500">
              {mockStats.resolvedCases.toLocaleString()}
            </div>
            <p className="text-xs text-gray-500 mt-1">
              92.9% resolution rate
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">
              Avg Response Time
            </CardTitle>
            <Camera className="h-4 w-4 text-yellow-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-500">
              {mockStats.averageResponseTime}
            </div>
            <p className="text-xs text-gray-500 mt-1">
              -1.2 min from last month
            </p>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Report Generator */}
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <FileText className="h-5 w-5 text-blue-500" />
              Generate Custom Report
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Date Picker */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Report Date
              </label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className="w-full justify-start text-left font-normal bg-gray-900 border-gray-700 text-white hover:bg-gray-800"
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {selectedDate ? format(selectedDate, "PPP") : "Pick a date"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={selectedDate}
                    onSelect={setSelectedDate}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>

            {/* Report Type */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Report Type
              </label>
              <Select value={reportType} onValueChange={setReportType}>
                <SelectTrigger className="bg-gray-900 border-gray-700 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-gray-700">
                  <SelectItem value="daily">Daily Report</SelectItem>
                  <SelectItem value="weekly">Weekly Summary</SelectItem>
                  <SelectItem value="monthly">Monthly Overview</SelectItem>
                  <SelectItem value="custom">Custom Range</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Location Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Location Filter
              </label>
              <Select value={selectedLocation} onValueChange={setSelectedLocation}>
                <SelectTrigger className="bg-gray-900 border-gray-700 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-gray-700">
                  <SelectItem value="all">All Locations</SelectItem>
                  <SelectItem value="sector17">Sector 17</SelectItem>
                  <SelectItem value="rosegarden">Rose Garden</SelectItem>
                  <SelectItem value="sukhnalake">Sukhna Lake</SelectItem>
                  <SelectItem value="itpark">IT Park</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <Button
              onClick={generateCustomReport}
              className="w-full bg-blue-600 hover:bg-blue-700"
            >
              <Download className="h-4 w-4 mr-2" />
              Generate PDF Report
            </Button>
          </CardContent>
        </Card>

        {/* Recent Reports */}
        <Card className="bg-gray-800 border-gray-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <FileText className="h-5 w-5 text-green-500" />
              Recent Reports
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {mockReports.map((report) => (
              <div
                key={report.id}
                className="flex items-center justify-between p-4 bg-gray-900 rounded-lg border border-gray-700"
              >
                <div className="flex-1">
                  <h4 className="font-medium text-white mb-1">{report.title}</h4>
                  <div className="flex items-center gap-4 text-sm text-gray-400">
                    <span>{report.incidents} incidents</span>
                    <span>{report.cameras} cameras</span>
                    <span>{report.alerts} alerts</span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    variant={report.status === 'generated' ? 'default' : 'outline'}
                    className="text-xs"
                  >
                    {report.status}
                  </Badge>
                  {report.status === 'generated' && (
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => generatePDFReport(report)}
                      className="border-gray-600 text-white hover:bg-gray-700"
                    >
                      <Download className="h-3 w-3 mr-1" />
                      PDF
                    </Button>
                  )}
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      </div>

      {/* Analytics Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Top Locations */}
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <MapPin className="h-5 w-5 text-purple-500" />
              Top Incident Locations
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {mockStats.topLocations.map((location, index) => (
                <div key={location.name} className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-6 h-6 rounded-full bg-purple-600 flex items-center justify-center text-xs font-bold text-white">
                      {index + 1}
                    </div>
                    <span className="text-white">{location.name}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-20 h-2 bg-gray-700 rounded-full overflow-hidden">
                      <div
                        className="h-full bg-purple-500"
                        style={{ width: `${(location.count / 45) * 100}%` }}
                      />
                    </div>
                    <span className="text-sm text-gray-400 w-8">{location.count}</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Incident Types */}
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <PieChart className="h-5 w-5 text-orange-500" />
              Incident Types Distribution
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {mockStats.incidentTypes.map((type) => (
                <div key={type.type} className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className={`w-3 h-3 rounded-full ${
                      type.type === 'suspicious' ? 'bg-blue-500' :
                      type.type === 'traffic' ? 'bg-green-500' :
                      type.type === 'crowd' ? 'bg-yellow-500' :
                      type.type === 'weapon' ? 'bg-red-500' :
                      'bg-purple-500'
                    }`} />
                    <span className="text-white capitalize">{type.type}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-gray-400">{type.percentage}%</span>
                    <span className="text-sm text-gray-500">({type.count})</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}